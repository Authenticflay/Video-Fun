import React from 'react';
import { HashRouter, Routes, Route, NavLink, useNavigate } from 'react-router-dom';
import { Home, Video, Image as ImageIcon, FileText, DollarSign, PlusCircle, Settings, Share2, Eye, MousePointerClick, Clock } from 'lucide-react';

// --- MOCK DATA AND TYPES (In a real app, these would be in separate files) ---

export enum ContentType {
  VIDEO = 'video',
  PHOTO = 'photo',
  ARTICLE = 'article',
}

export interface BaseContent {
  id: string;
  title: string;
  author: string;
  authorAvatar: string;
  views: number;
  shares: number;
  type: ContentType;
  createdAt: Date;
  earnings: number;
}

export interface VideoContent extends BaseContent {
  type: ContentType.VIDEO;
  videoUrl: string;
  thumbnailUrl: string;
}

export interface PhotoContent extends BaseContent {
  type: ContentType.PHOTO;
  imageUrl: string;
}

export interface ArticleContent extends BaseContent {
  type: ContentType.ARTICLE;
  content: string;
  coverImageUrl: string;
}

export type Content = VideoContent | PhotoContent | ArticleContent;

const initialContent: Content[] = [
    { id: '1', type: ContentType.VIDEO, title: 'Exploring the Alps', author: 'Jane Doe', authorAvatar: 'https://i.pravatar.cc/150?u=jane', views: 1500, shares: 25, createdAt: new Date(), earnings: 0, videoUrl: '', thumbnailUrl: 'https://picsum.photos/seed/alps/600/400' },
    { id: '2', type: ContentType.PHOTO, title: 'City at Night', author: 'John Smith', authorAvatar: 'https://i.pravatar.cc/150?u=john', views: 800, shares: 12, createdAt: new Date(Date.now() - 86400000), earnings: 0, imageUrl: 'https://picsum.photos/seed/city/600/800' },
    { id: '3', type: ContentType.ARTICLE, title: 'The Art of Minimalist Design', author: 'Alice Johnson', authorAvatar: 'https://i.pravatar.cc/150?u=alice', views: 2200, shares: 42, createdAt: new Date(Date.now() - 172800000), earnings: 0, content: 'Minimalism is not a lack of something. Itâ€™s simply the perfect amount of something...', coverImageUrl: 'https://picsum.photos/seed/design/600/400' },
];

export enum WithdrawalMethod {
  NATCASH = 'Natcash',
  BANK = 'Bank Transfer',
  PAYPAL = 'PayPal',
  CRYPTO = 'Crypto (USDT TRC20)',
}

// --- CONTEXT MANAGEMENT ---

interface AppContextType {
  content: Content[];
  addContent: (item: Omit<Content, 'id' | 'author' | 'authorAvatar' | 'views' | 'shares' | 'createdAt' | 'earnings'>) => void;
  updateStats: (id: string, type: 'view' | 'share' | 'videoWatch' | 'adClick') => void;
  balance: number;
  stats: { clicks: number; views: number; videoSeconds: number; shares: number; };
  withdraw: (amount: number, method: WithdrawalMethod) => void;
}

const AppContext = React.createContext<AppContextType | null>(null);

const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [content, setContent] = React.useState<Content[]>(initialContent);
  const [balance, setBalance] = React.useState(125.50);
  const [stats, setStats] = React.useState({ clicks: 12, views: 4500, videoSeconds: 1800, shares: 79 });

  const addContent = (item: Omit<Content, 'id' | 'author' | 'authorAvatar' | 'views' | 'shares' | 'createdAt' | 'earnings'>) => {
    const newItem: Content = {
      ...item,
      id: new Date().toISOString(),
      author: 'Current User',
      authorAvatar: https://i.pravatar.cc/150?u=current,
      views: 0,
      shares: 0,
      createdAt: new Date(),
      earnings: 0,
    } as Content;
    setContent(prev => [newItem, ...prev]);
  };
  
  const updateStats = (id: string, type: 'view' | 'share' | 'videoWatch' | 'adClick') => {
    let earningsUpdate = 0;
    
    // Monetization Logic
    if(type === 'view') {
        earningsUpdate = 0.50; // $50 per 100 views
        setStats(s => ({...s, views: s.views + 1}));
    } else if (type === 'share') {
        earningsUpdate = 1.00; // $1 per share
        setStats(s => ({...s, shares: s.shares + 1}));
    } else if (type === 'videoWatch') {
        earningsUpdate = 1.00 / 15; // $1 per 15 seconds
        setStats(s => ({...s, videoSeconds: s.videoSeconds + 1}));
    } else if (type === 'adClick') {
        earningsUpdate = 1.00; // $1 per click
        setStats(s => ({...s, clicks: s.clicks + 1}));
    }
    
    setBalance(b => b + earningsUpdate);
    setContent(c => c.map(item => item.id === id ? {...item, earnings: item.earnings + earningsUpdate} : item));
  };
  
  const withdraw = (amount: number, method: WithdrawalMethod) => {
    if (balance >= amount) {
        setBalance(b => b - amount);
        alert(Successfully requested withdrawal of $${amount.toFixed(2)} via ${method}.);
    } else {
        alert("Insufficient balance.");
    }
  };

  return (
    <AppContext.Provider value={{ content, addContent, updateStats, balance, stats, withdraw }}>
      {children}
    </AppContext.Provider>
  );
};

export const useAppContext = () => {
    const context = React.useContext(AppContext);
    if (!context) throw new Error('useAppContext must be used within an AppProvider');
    return context;
};

// --- LAYOUT COMPONENTS ---

const Header: React.FC = () => {
    return (
        <header className="fixed top-0 left-0 right-0 h-16 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 flex items-center justify-between px-4 sm:px-6 z-40">
            <a href="/#" className="flex items-center gap-2">
                <div className="bg-indigo-600 rounded-lg p-2">
                    <Settings className="h-6 w-6 text-white" />
                </div>
                <span className="text-xl font-bold text-gray-800 dark:text-white">CreatorHub</span>
            </a>
            <div className="flex items-center gap-4">
                <NavLink to="/create" className={({isActive}) => flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-semibold transition-colors ${isActive ? 'bg-indigo-600 text-white' : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700'}}>
                    <PlusCircle className="h-4 w-4" />
                    Create
                </NavLink>
                <img src="https://i.pravatar.cc/150?u=current" alt="User Avatar" className="h-9 w-9 rounded-full" />
            </div>
        </header>
    );
};

const SideNav: React.FC = () => {
    const NavItem: React.FC<{ to: string, icon: React.ElementType, label: string }> = ({ to, icon: Icon, label }) => {
        return (
            <NavLink to={to} className={({isActive}) => flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-colors ${isActive ? 'bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800'}}>
                <Icon className="h-5 w-5" />
                <span>{label}</span>
            </NavLink>
        );
    }
    return (
        <nav className="hidden md:flex flex-col gap-2 p-4 w-64 border-r border-gray-200 dark:border-gray-700">
            <NavItem to="/" icon={Home} label="Home Feed" />
            <NavItem to="/earnings" icon={DollarSign} label="Earnings" />
            <NavItem to="/create" icon={PlusCircle} label="Create Content" />
            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                 <h3 className="px-3 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider">My Content</h3>
                 <div className="mt-2 flex flex-col gap-2">
                    <NavItem to="/my-content/videos" icon={Video} label="Videos" />
                    <NavItem to="/my-content/photos" icon={ImageIcon} label="Photos" />
                    <NavItem to="/my-content/articles" icon={FileText} label="Articles" />
                 </div>
            </div>
        </nav>
    );
};

// --- PAGE COMPONENTS ---

const HomePage: React.FC = () => {
    const { content, updateStats } = useAppContext();

    const onShare = (id: string) => {
        updateStats(id, 'share');
        alert('Content shared! +$1.00');
    };

    const ContentCard: React.FC<{item: Content}> = ({ item }) => {
        const getIcon = (type: ContentType) => {
            if (type === ContentType.VIDEO) return <Video className="h-4 w-4" />;
            if (type === ContentType.PHOTO) return <ImageIcon className="h-4 w-4" />;
            return <FileText className="h-4 w-4" />;
        };
        
        React.useEffect(() => {
            const timer = setTimeout(() => updateStats(item.id, 'view'), 2000); // Simulate view after 2 seconds on screen
            return () => clearTimeout(timer);
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [item.id]);

        return (
            <div className="bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300 border border-gray-200 dark:border-gray-700">
                <div className="p-4 flex items-center gap-3">
                    <img src={item.authorAvatar} alt={item.author} className="h-10 w-10 rounded-full" />
                    <div>
                        <p className="font-semibold text-gray-800 dark:text-gray-100">{item.author}</p>
                        <p className="text-xs text-gray-500 dark:text-gray-400">{item.createdAt.toLocaleDateString()}</p>
                    </div>
                </div>
                {item.type === ContentType.PHOTO && <img src={item.imageUrl} alt={item.title} className="w-full h-auto object-cover" />}
                {(item.type === ContentType.VIDEO || item.type === ContentType.ARTICLE) && <img src={item.type === 'video' ? item.thumbnailUrl : item.coverImageUrl} alt={item.title} className="w-full h-64 object-cover" />}
                <div className="p-4">
                    <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-2">{item.title}</h3>
                    {item.type === ContentType.ARTICLE && <p className="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">{item.content}</p>}
                    <div className="flex justify-between items-center text-sm text-gray-500 dark:text-gray-400">
                        <div className="flex items-center gap-4">
                           <span className="flex items-center gap-1.5"><Eye className="h-4 w-4" /> {item.views.toLocaleString()}</span>
                           <span className="flex items-center gap-1.5"><Share2 className="h-4 w-4" /> {item.shares.toLocaleString()}</span>
                           <span className="flex items-center gap-1.5">{getIcon(item.type)} {item.type}</span>
                        </div>
                        <button onClick={() => onShare(item.id)} className="px-3 py-1.5 bg-indigo-50 hover:bg-indigo-100 dark:bg-indigo-900/50 dark:hover:bg-indigo-900 text-indigo-600 dark:text-indigo-300 rounded-md font-semibold text-xs">Share</button>
                    </div>
                </div>
            </div>
        );
    }
    
    const DummyAd: React.FC = () => {
        const { updateStats } = useAppContext();
        const onAdClick = () => {
            updateStats('ad-id', 'adClick');
            alert('Ad clicked! +$1.00');
        };
        return (
            <div onClick={onAdClick} className="bg-gray-100 dark:bg-gray-800 rounded-xl p-4 my-8 text-center cursor-pointer border-2 border-dashed border-gray-300 dark:border-gray-600 hover:border-green-500 dark:hover:border-green-500 transition-colors">
                <p className="text-sm font-semibold text-gray-500 dark:text-gray-400">Google AdSense</p>
                <p className="text-lg font-bold text-gray-700 dark:text-gray-200">Your Ad Here!</p>
                <p className="text-xs text-gray-400 dark:text-gray-500">Click to earn $1.00</p>
            </div>
        );
    }

    return (
        <div className="max-w-2xl mx-auto py-8 px-4">
            <h1 className="text-3xl font-extrabold text-gray-900 dark:text-white mb-6">Home Feed</h1>
            <div className="space-y-8">
                {content.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <ContentCard item={item} />
                        {index === 1 && <DummyAd />}
                    </React.Fragment>
                ))}
            </div>
        </div>
    );
};

const CreatePage: React.FC = () => {
    const [activeTab, setActiveTab] = React.useState<ContentType>(ContentType.VIDEO);
    const [videoFile, setVideoFile] = React.useState<File | null>(null);
    const [photoFile, setPhotoFile] = React.useState<File | null>(null);
    const videoInputRef = React.useRef<HTMLInputElement>(null);
    const photoInputRef = React.useRef<HTMLInputElement>(null);
    const { addContent } = useAppContext();
    const navigate = useNavigate();
    
    const handleVideoFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setVideoFile(e.target.files[0]);
        }
    };

    const handlePhotoFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setPhotoFile(e.target.files[0]);
        }
    };

    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const formData = new FormData(e.currentTarget);
        const title = formData.get('title') as string;

        let newContent: Omit<Content, 'id' | 'author' | 'authorAvatar' | 'views' | 'shares' | 'createdAt' | 'earnings'>;

        switch(activeTab) {
            case ContentType.VIDEO: {
                if (!videoFile) {
                    alert('Please select a video file to upload.');
                    return;
                }
                const videoContent = { type: ContentType.VIDEO, title, videoUrl: '', thumbnailUrl: 'https://picsum.photos/seed/newvideo/600/400' };
                newContent = videoContent;
                break;
            }
            case ContentType.PHOTO: {
                 if (!photoFile) {
                    alert('Please select a photo file to upload.');
                    return;
                }
                 const photoContent = { type: ContentType.PHOTO, title, imageUrl: 'https://picsum.photos/seed/newphoto/600/800' };
                 newContent = photoContent;
                break;
            }
            case ContentType.ARTICLE: {
                const content = formData.get('content') as string;
                const articleContent = { type: ContentType.ARTICLE, title, content, coverImageUrl: 'https://picsum.photos/seed/newarticle/600/400' };
                newContent = articleContent;
                break;
            }
            default:
                return;
        }
        
        addContent(newContent);
        alert('Content created successfully!');
        navigate('/');
    };
    
    const TabButton: React.FC<{ type: ContentType; label: string; icon: React.ElementType; }> = ({type, label, icon: Icon}) => (
        <button type="button" onClick={() => setActiveTab(type)} className={flex-1 flex items-center justify-center gap-2 p-4 font-semibold border-b-4 transition-colors ${activeTab === type ? 'border-indigo-600 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-800 dark:hover:text-gray-200'}}>
            <Icon className="h-5 w-5" />
            {label}
        </button>
    );

    return (
        <div className="max-w-3xl mx-auto py-8 px-4">
            <h1 className="text-3xl font-extrabold text-gray-900 dark:text-white mb-6">Create New Content</h1>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
                <div className="flex border-b border-gray-200 dark:border-gray-700">
                    <TabButton type={ContentType.VIDEO} label="Video" icon={Video} />
                    <TabButton type={ContentType.PHOTO} label="Photo" icon={ImageIcon} />
                    <TabButton type={ContentType.ARTICLE} label="Article" icon={FileText} />
                </div>
                <form onSubmit={handleSubmit} className="p-6 space-y-6">
                    <div>
                        <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Title</label>
                        <input type="text" name="title" id="title" required className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white" />
                    </div>
                    
                    {activeTab === ContentType.VIDEO && (
                        <div>
                             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Upload Video</label>
                             <input type="file" ref={videoInputRef} onChange={handleVideoFileChange} className="hidden" accept="video/*" />
                             <div onClick={() => videoInputRef.current?.click()} className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md cursor-pointer hover:border-indigo-500 dark:hover:border-indigo-400 transition-colors">
                                <div className="space-y-1 text-center">
                                    <Video className="mx-auto h-12 w-12 text-gray-400" />
                                    {videoFile ? (
                                        <p className="text-sm font-medium text-green-600 dark:text-green-400">{videoFile.name}</p>
                                    ) : (
                                        <>
                                            <p className="text-sm text-gray-600 dark:text-gray-400">Drag & drop or <span className="text-indigo-600 font-semibold">browse</span> to upload</p>
                                            <p className="text-xs text-gray-500 dark:text-gray-500">MP4, MOV, AVI up to 500MB</p>
                                        </>
                                    )}
                                </div>
                             </div>
                        </div>
                    )}

                    {activeTab === ContentType.PHOTO && (
                         <div>
                             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Upload Photo</label>
                             <input type="file" ref={photoInputRef} onChange={handlePhotoFileChange} className="hidden" accept="image/*" />
                             <div onClick={() => photoInputRef.current?.click()} className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md cursor-pointer hover:border-indigo-500 dark:hover:border-indigo-400 transition-colors">
                                <div className="space-y-1 text-center">
                                    <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                                     {photoFile ? (
                                        <p className="text-sm font-medium text-green-600 dark:text-green-400">{photoFile.name}</p>
                                    ) : (
                                        <>
                                            <p className="text-sm text-gray-600 dark:text-gray-400">Drag & drop or <span className="text-indigo-600 font-semibold">browse</span> to upload</p>
                                            <p className="text-xs text-gray-500 dark:text-gray-500">PNG, JPG, GIF up to 10MB</p>
                                        </>
                                    )}
                                </div>
                             </div>
                        </div>
                    )}
                    
                    {activeTab === ContentType.ARTICLE && (
                         <div>
                             <label htmlFor="content" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Article Content</label>
                            <textarea id="content" name="content" rows={10} required className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white"></textarea>
                         </div>
                    )}
                    
                    <div className="flex justify-end">
                        <button type="submit" className="inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Publish
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const EarningsPage: React.FC = () => {
    const { balance, stats, withdraw } = useAppContext();
    const [showModal, setShowModal] = React.useState<WithdrawalMethod | null>(null);

    const withdrawalOptions = [
        { method: WithdrawalMethod.NATCASH, threshold: 10, field: 'Phone Number', type: 'tel' },
        { method: WithdrawalMethod.PAYPAL, threshold: 10, field: 'PayPal Email', type: 'email' },
        { method: WithdrawalMethod.CRYPTO, threshold: 10, field: 'USDT TRC20 Address', type: 'text' },
        { method: WithdrawalMethod.BANK, threshold: 20, field: 'Bank Account Details', type: 'textarea' },
    ];
    
    const handleWithdraw = (e: React.FormEvent<HTMLFormElement>, method: WithdrawalMethod, threshold: number) => {
        e.preventDefault();
        const formData = new FormData(e.currentTarget);
        const amount = parseFloat(formData.get('amount') as string);
        if (amount < threshold) {
            alert(Minimum withdrawal for ${method} is $${threshold}.);
            return;
        }
        withdraw(amount, method);
        setShowModal(null);
    };

    const StatCard: React.FC<{ icon: React.ElementType; label: string; value: string; color: string; }> = ({icon: Icon, label, value, color}) => (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 flex items-center gap-4">
            <div className={p-3 rounded-full ${color}}>
                <Icon className="h-6 w-6 text-white" />
            </div>
            <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">{label}</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">{value}</p>
            </div>
        </div>
    );
    
    const WithdrawalModal: React.FC<{ option: typeof withdrawalOptions[0]; onClose: () => void }> = ({ option, onClose }) => (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md">
                <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Withdraw via {option.method}</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Minimum withdrawal: ${option.threshold}</p>
                </div>
                <form onSubmit={(e) => handleWithdraw(e, option.method, option.threshold)} className="p-6 space-y-4">
                     <div>
                        <label htmlFor="amount" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Amount ($)</label>
                        <input type="number" name="amount" id="amount" step="0.01" min={option.threshold} max={balance} required className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white" />
                    </div>
                    <div>
                        <label htmlFor={option.field} className="block text-sm font-medium text-gray-700 dark:text-gray-300">{option.field}</label>
                         {option.type === 'textarea' ? (
                            <textarea name={option.field} id={option.field} rows={3} required className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white" />
                         ) : (
                            <input type={option.type} name={option.field} id={option.field} required className="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white" />
                         )}
                    </div>
                    <div className="flex justify-end gap-3 pt-4">
                         <button type="button" onClick={onClose} className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600">Cancel</button>
                         <button type="submit" className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-700">Request Withdrawal</button>
                    </div>
                </form>
            </div>
        </div>
    );
    
    return (
        <div className="max-w-4xl mx-auto py-8 px-4">
            <h1 className="text-3xl font-extrabold text-gray-900 dark:text-white mb-2">Earnings Dashboard</h1>
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-8">Track your simulated earnings and manage withdrawals.</p>

            <div className="p-8 bg-indigo-600 rounded-xl shadow-lg text-white mb-8">
                <p className="text-sm font-medium uppercase tracking-wider opacity-80">Current Balance</p>
                <p className="text-5xl font-extrabold mt-2">${balance.toFixed(2)}</p>
            </div>
            
            <h2 className="text-xl font-bold text-gray-800 dark:text-gray-100 mb-4">Performance Stats</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <StatCard icon={Eye} label="Total Views" value={stats.views.toLocaleString()} color="bg-blue-500" />
                <StatCard icon={MousePointerClick} label="Ad Clicks" value={stats.clicks.toLocaleString()} color="bg-green-500" />
                <StatCard icon={Clock} label="Video Watch Time" value={${Math.floor(stats.videoSeconds / 60)}m ${stats.videoSeconds % 60}s} color="bg-red-500" />
                <StatCard icon={Share2} label="Shares" value={stats.shares.toLocaleString()} color="bg-purple-500" />
            </div>

            <h2 className="text-xl font-bold text-gray-800 dark:text-gray-100 mb-4">Withdraw Funds</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                {withdrawalOptions.map(option => (
                    <div key={option.method} className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 className="font-bold text-gray-900 dark:text-white">{option.method}</h3>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Min. ${option.threshold}</p>
                        <button onClick={() => setShowModal(option.method)} className="mt-4 w-full text-sm font-semibold py-2 px-4 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md text-gray-800 dark:text-gray-100 transition-colors">
                            Withdraw
                        </button>
                    </div>
                ))}
            </div>
            
            {showModal && (
                <WithdrawalModal option={withdrawalOptions.find(opt => opt.method === showModal)!} onClose={() => setShowModal(null)} />
            )}
        </div>
    );
};


// --- APP ROOT ---

function App() {
  return (
    <AppProvider>
      <HashRouter>
        <div className="min-h-screen text-gray-800 dark:text-gray-200 font-sans">
          <Header />
          <main className="pt-16 flex">
            <SideNav />
            <div className="flex-1 bg-gray-100 dark:bg-gray-900/50">
                <Routes>
                    <Route path="/" element={<HomePage />} />
                    <Route path="/create" element={<CreatePage />} />
                    <Route path="/earnings" element={<EarningsPage />} />
                    <Route path="/my-content/:type" element={<p className="p-8">Content management page coming soon!</p>} />
                </Routes>
            </div>
          </main>
        </div>
      </HashRouter>
    </AppProvider>
  );
}

export default App;